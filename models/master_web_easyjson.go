// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDbb80089DecodeGithubComTechnoZoomersMasterHubBackendModels(in *jlexer.Lexer, out *Masters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Masters, 0, 0)
			} else {
				*out = Masters{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Master
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDbb80089EncodeGithubComTechnoZoomersMasterHubBackendModels(out *jwriter.Writer, in Masters) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Masters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDbb80089EncodeGithubComTechnoZoomersMasterHubBackendModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Masters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDbb80089EncodeGithubComTechnoZoomersMasterHubBackendModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Masters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDbb80089DecodeGithubComTechnoZoomersMasterHubBackendModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Masters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDbb80089DecodeGithubComTechnoZoomersMasterHubBackendModels(l, v)
}
func easyjsonDbb80089DecodeGithubComTechnoZoomersMasterHubBackendModels1(in *jlexer.Lexer, out *Master) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserId = int64(in.Int64())
		case "username":
			out.Username = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "language":
			if in.IsNull() {
				in.Skip()
				out.Languages = nil
			} else {
				in.Delim('[')
				if out.Languages == nil {
					if !in.IsDelim(']') {
						out.Languages = make([]string, 0, 4)
					} else {
						out.Languages = []string{}
					}
				} else {
					out.Languages = (out.Languages)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Languages = append(out.Languages, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "theme":
			(out.Theme).UnmarshalEasyJSON(in)
		case "description":
			out.Description = string(in.String())
		case "qualification":
			out.Qualification = string(in.String())
		case "education_format":
			if in.IsNull() {
				in.Skip()
				out.EducationFormat = nil
			} else {
				in.Delim('[')
				if out.EducationFormat == nil {
					if !in.IsDelim(']') {
						out.EducationFormat = make([]string, 0, 4)
					} else {
						out.EducationFormat = []string{}
					}
				} else {
					out.EducationFormat = (out.EducationFormat)[:0]
				}
				for !in.IsDelim(']') {
					var v5 string
					v5 = string(in.String())
					out.EducationFormat = append(out.EducationFormat, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hour_price":
			easyjsonDbb80089DecodeGithubComTechnoZoomersMasterHubBackendModels2(in, &out.AveragePrice)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDbb80089EncodeGithubComTechnoZoomersMasterHubBackendModels1(out *jwriter.Writer, in Master) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.UserId))
	}
	{
		const prefix string = ",\"username\":"
		out.RawString(prefix)
		out.String(string(in.Username))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"language\":"
		out.RawString(prefix)
		if in.Languages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Languages {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.String(string(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"theme\":"
		out.RawString(prefix)
		(in.Theme).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"qualification\":"
		out.RawString(prefix)
		out.String(string(in.Qualification))
	}
	{
		const prefix string = ",\"education_format\":"
		out.RawString(prefix)
		if in.EducationFormat == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.EducationFormat {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"hour_price\":"
		out.RawString(prefix)
		easyjsonDbb80089EncodeGithubComTechnoZoomersMasterHubBackendModels2(out, in.AveragePrice)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Master) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDbb80089EncodeGithubComTechnoZoomersMasterHubBackendModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Master) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDbb80089EncodeGithubComTechnoZoomersMasterHubBackendModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Master) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDbb80089DecodeGithubComTechnoZoomersMasterHubBackendModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Master) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDbb80089DecodeGithubComTechnoZoomersMasterHubBackendModels1(l, v)
}
func easyjsonDbb80089DecodeGithubComTechnoZoomersMasterHubBackendModels2(in *jlexer.Lexer, out *Price) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Value).UnmarshalJSON(data))
			}
		case "currency":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDbb80089EncodeGithubComTechnoZoomersMasterHubBackendModels2(out *jwriter.Writer, in Price) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.Raw((in.Value).MarshalJSON())
	}
	{
		const prefix string = ",\"currency\":"
		out.RawString(prefix)
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}
